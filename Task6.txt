1. Write a program in Python to find out the character in a string which is uppercase using list
comprehension.

st = input("Enter the string: ")
op = [x for x in st if x.isupper()]
print(op)


2. Write a program to construct a dictionary from the two lists containing the names of students and
their corresponding subjects. The dictionary should map the students with their respective subjects.
Let’s see how to do this using for loops and dictionary comprehension.
HINT - Use Zip function also
Sample input: students = ['Smit', 'Jaya', 'Rayyan'] subjects = ['CSE', 'Networking', 'Operating System']
Expected output: {‘Smit’ : ’CSE’ , ’Jaya’ : ’Networking’ , ’Rayyan’ : ’Operating System’}

name = [x for x in input("Enter the names: ").split()]
subject = [x for x in input("Enter the subjects: ").split()]
output={}
if len(name) != len(subject):
    print("The lengths are not same.")
else:
    for i in range(len(name)):
        # print(i)
        # print(name[i])
        # print(subject[i])
        output[name[i]] = subject[i]
print(output)

# Using zip function
name = [x for x in input("Enter the names: ").split()]
subject = [x for x in input("Enter the subjects: ").split()]
output = dict(zip(name,subject))
print(output)

# Using dictionary comprehension
name = [x for x in input("Enter the names: ").split()]
subject = [x for x in input("Enter the subjects: ").split()]
output = {key:value for (key, value) in zip(name,subject)}
print(output)


3. Learn More about Yield, next and Generators

Yield keyword is used as the return keyword but in generator. It works same as return does in function.
Yield keyword is identifier that this is generator and not a normal function. We can have multiple yield statements in a single generator.

next keyword is reffered for iterating values which will be yield by the generator.
we can get multiple values from generator by using multiple next.

Generator is advanced version of iteration in python.


4. Write a program in Python using generators to reverse the string.
Input String = “Consultadd Training”

str = "Consultadd Training"
def reverse(s):
    yield s[::-1]

r = reverse(str)
print(r.__next__())


5. Write an example on decorators.

def my_decorator(func):
    def wraper(str):
        print("****************************************************")
        func(str)
        print("****************************************************")
    return wraper

@my_decorator
def p(str):
    print(str)
p(input(