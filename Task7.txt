1. Write a program that calculates and prints the value according to the given formula:
Q= Square root of [(2*C*D)/H]
Following are the fixed values of C and H:
C is 50.
H is 30.
D is a variable whose values should be input to your program in a comma-separated sequence.

class calculation:
    def __init__(self):
        self.c, self.h = 50, 30

    def result(self,l):
        q=[]
        for i in l:
            res = ((2*self.c*int(i))/self.h)**0.5
            q.append(res)
        return [round(i,2) for i in q]

c1=calculation()
l1=[x for x in input("Enter the numbers: ").split(",")]
print(c1.result(l1))


2. Define a class named Shape and its subclass Square. The Square class has an init function which
takes length as argument. Both classes have an area function which can print the area of the shape
where Shape’s area is 0 by default.

class shape:
    def area(self):
        area = self.length ** 2
        print(area)

class square(shape):
    def __init__(self,length):
        self.length = length
        self.a = 0
    def area(self):
        a = self.length ** 2
        return a

c1 = square(20)
print(c1.area())



3. Create a class to find three elements that sum to zero from a set of n real numbers
Input array: [-25,-10,-7,-3,2,4,8,10]
Expected output: [[-10,2,8],[-7,-3,10]]

class q3:
    def __init__(self):
        self.ip = [eval(x) for x in input("Enter numbers: ").split(",")]
    def fun(self):
        n=len(self.ip)
        res=[]
        for i in range(0,n-2):
            for j in range(i+1,n-1):
                for k in range(j+1,n):
                    if self.ip[i]+self.ip[j]+self.ip[k] == 0:
                        res.append([self.ip[i],self.ip[j],self.ip[k]])
        return res


l = [-25,-10,-7,-3,2,4,8,10,15]
print(l)
inp = q3()
result = inp.fun()
print(result)


4. Create a Time class and initialize it with hours and minutes.
Create a method addTime which should take two Time objects and add them.
E.g.- (2 hour and 50 min)+(1 hr and 20 min) is (4 hr and 10 min)
Create another method displayTime which should print the time.
Also create a method displayMinute which should display the total minutes in the Time.
E.g.- (1 hr 2 min) should display 62 minute.

class time_class:
    def __init__(self):
        self.hours = 0
        self.minutes = 0

    def addTime(self,t1,t2):
        t1_hours,t1_minutes = t1[0],t1[1]
        t2_hours,t2_minutes = t2[0],t2[1]
        hours = t1_hours + t2_hours
        minutes = t1_minutes + t2_minutes
        actual_hours = hours + minutes // 60
        actual_minutes = minutes % 60
        return [actual_hours,actual_minutes]

    def displayTime(self,t1):
        t1_hours = t1[0]
        t1_minutes = t1[1]
        print("Entered time is {} hour and {} minutes".format(t1_hours,t1_minutes))

    def displayMinute(self,t1):
        minutes = (t1[0]*60) + t1[1]
        print("The entered time is equivalant to {} minutes".format(minutes))

t1 = [int(x) for x in input("").split(":")]
t2 = [int(x) for x in input("").split(":")]
ti = time_class()
result = ti.addTime(t1,t2)
print(" Total time is {} Hours and {} minutes".format(result[0],result[1]))
ti.displayTime(t1)
ti.displayMinute(t2)


5. Write a Person class with an instance variable “age” and a constructor that takes an integer as a
parameter. The constructor must assign the integer value to the age variable after confirming the
argument passed is not negative; if a negative argument is passed then the constructor should set
age to 0 and print “Age is not valid, setting age to 0”. In addition, you must write the following instance
methods:

yearPasses() should increase age by the integer value that you are passing inside the function.
amIOld() should perform the following conditional actions:I
f age is between 0 and <13, print “You are young”.
If age is >=13 and <=19 , print “You are a teenager”.
Otherwise, print “You are old”.

Sample Input for amIOld():
-1
4
10
16
18
64
38

Expected Output for amIOld():
Age is not valid, setting age to 0.
You are young.
You are young.
You are a teenager.
You are a teenager.
You are old.
You are old.

Consider the age variable to be set to 38 then:
Sample Input for yearPasses(): 4
Expected Output for yearPasses(): 42

class person:
    age = 0
    def __init__(self,a):
        if a <=0:
            print("Age is not valid, setting age to 0")
            self.age = 0
        else:
            self.age = a

    def yearPasses(self,n):
        self.age += n
        print("Age after {} year passes : {}".format(n,self.age))

    def amIOld(self):
            if int(self.age) in range(1,13):
                print("You are Young",end="\n")
            elif int(self.age) in range(13,20):
                print("You are a Teenager",end="\n")
            elif int(self.age) >=20:
                print("You are Old", end="\n")

l=[-2,2,5,8,12,32,25]
for i in l:
    p=person(i)
    p.yearPasses(10)
    p.amIOld()

